#include "types.h"
#include "defs.h"
#include "param.h"
#include "mmu.h"
#include "proc.h"

int
sys_fork(void)
{
  int pid;
  struct proc *np;

  if((np = copyproc(cp)) == 0)
    return -1;
  pid = np->pid;
  np->state = RUNNABLE;
  return pid;
}

int
sys_exit(void)
{
  exit();
  return 0;  // not reached
}

int
sys_wait(void)
{
  return wait();
}

int
sys_kill(void)
{
  int pid;

  if(argint(0, &pid) < 0)
    return -1;
  return kill(pid);
}

int
sys_getpid(void)
{
  return cp->pid;
}

int
sys_sbrk(void)
{
  int addr;
  int n;

  if(argint(0, &n) < 0)
    return -1;
  if((addr = growproc(n)) < 0)
    return -1;
  return addr;
}

int
sys_sleep(void)
{
  int n, ticks0;
  
  if(argint(0, &n) < 0)
    return -1;
  acquire(&tickslock);
  ticks0 = ticks;
  while(ticks - ticks0 < n){
    if(cp->killed){
      release(&tickslock);
      return -1;
    }
    sleep(&ticks, &tickslock);
  }
  release(&tickslock);
  return 0;
}

struct ktest{
	int number;
		struct ktest * nextk;
};

int
sys_kalloctest(void)
{
   int sz1, sz2, sz3, sz4;
  struct ktest * ktst;
  struct ktest * ktst1;
  struct ktest * ktst2;
  sz1 = 15;
  sz2 = 27;
  sz3 = 45;
  sz4 = 8898970;
  
   cprintf("Kallocing test %d\n", sz1);
   char * test = kalloc(sz1);
   cprintf("address ret %x\n", test);
   int k;
   for(k = 0; k < 16; k++)
{
	test[k] = 'a';
	cprintf("contents of test at %d: %s \n", k,test);
}

cprintf("Kallocing space for 3 ktest structs: %d bytes\n", sizeof(struct ktest)*3);

ktst = kalloc(sizeof(struct ktest));
ktst1 = kalloc(sizeof(struct ktest));
ktst2 = kalloc(sizeof(struct ktest));

ktst->number = sz2;
ktst1->number = sz3;
ktst2->number = sz4;
ktst->nextk = ktst1;
ktst1->nextk = ktst2;
ktst2->nextk = ktst;

cprintf("addresses: ktst - %x, ktst1 - %x, ktst2 - %x\n", ktst, ktst1, ktst2);
cprintf("ktst data: num - %d, ptr - %x\n",ktst->number, ktst->nextk);
cprintf("ktst1 data: num - %d, ptr - %x\n",ktst1->number, ktst1->nextk);
cprintf("ktst2 data: num - %d, ptr - %x\n",ktst2->number, ktst2->nextk);

cprintf("freeing everything\n");
cprintf("kfree test\n");
kfree(test, sz1);
cprintf("kfree ktst1\n");
kfree(ktst1, sizeof(struct ktest));
cprintf("kfree ktst2\n");
kfree(ktst2, sizeof(struct ktest));
cprintf("kfree ktst\n");
kfree(ktst, sizeof(struct ktest));

cprintf("THAT'S ALL FOLKS!\n");
return 0;
}

