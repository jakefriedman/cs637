#include "types.h"
#include "defs.h"
#include "param.h"
#include "mmu.h"
#include "proc.h"
#include "x86.h"


static void bootothers(void);
static void mpmain(void) __attribute__((noreturn));
static void kalloctest(void);


// Bootstrap processor starts running C code here.
int
main(void)
{
  extern char edata[], end[];

  // clear BSS
  memset(edata, 0, end - edata);

  mp_init(); // collect info about this machine
  lapic_init(mp_bcpu());
  cprintf("\ncpu%d: starting xv6\n\n", cpu());

  pinit();         // process table
  binit();         // buffer cache
  pic_init();      // interrupt controller
  ioapic_init();   // another interrupt controller
  kinit();         // physical memory allocator
  tvinit();        // trap vectors
  fileinit();      // file table
  iinit();         // inode cache
  console_init();  // I/O devices & their interrupts
  ide_init();      // disk
  if(!ismp)
    timer_init();  // uniprocessor timer
  userinit();      // first user process
  bootothers();    // start other processors
  
 // kalloctest();    //test kalloc(bytes)
  // Finish setting up this processor in mpmain.
  mpmain();
}

// Bootstrap processor gets here after setting up the hardware.
// Additional processors start here.
static void
mpmain(void)
{
  cprintf("cpu%d: mpmain\n", cpu());
  idtinit();
  if(cpu() != mp_bcpu())
    lapic_init(cpu());
  setupsegs(0);
  xchg(&cpus[cpu()].booted, 1);

  cprintf("cpu%d: scheduling\n", cpu());
  scheduler();
}

static void
bootothers(void)
{
  extern uchar _binary_bootother_start[], _binary_bootother_size[];
  uchar *code;
  struct cpu *c;
  char *stack;

  // Write bootstrap code to unused memory at 0x7000.
  code = (uchar*)0x7000;
  memmove(code, _binary_bootother_start, (uint)_binary_bootother_size);

  for(c = cpus; c < cpus+ncpu; c++){
    if(c == cpus+cpu())  // We've started already.
      continue;

    // Fill in %esp, %eip and start code on cpu.
    stack = kalloc(KSTACKSIZE);
    *(void**)(code-4) = stack + KSTACKSIZE;
    *(void**)(code-8) = mpmain;
    lapic_startap(c->apicid, (uint)code);

    // Wait for cpu to get through bootstrap.
    while(c->booted == 0)
      ;
  }
}


struct ktest{
	int number;
		struct ktest * nextk;
};


static void kalloctest(void)
{
   int sz1, sz2, sz3, sz4;
  struct ktest * ktst;
  struct ktest * ktst1;
  struct ktest * ktst2;
  sz1 = 15;
  sz2 = 27;
  sz3 = 45;
  sz4 = 8898970;
  
   cprintf("Kallocing test %d\n", sz1);
   char * test = kalloc(sz1);
   cprintf("address ret %x\n", test);
   int k;
   for(k = 0; k < 16; k++)
{
	test[k] = 'a';
	cprintf("contents of test at %d: %s \n", k,test);
}

cprintf("Kallocing space for 3 ktest structs: %d bytes\n", sizeof(struct ktest)*3);

ktst = kalloc(sizeof(struct ktest));
ktst1 = kalloc(sizeof(struct ktest));
ktst2 = kalloc(sizeof(struct ktest));

ktst->number = sz2;
ktst1->number = sz3;
ktst2->number = sz4;
ktst->nextk = ktst1;
ktst1->nextk = ktst2;
ktst2->nextk = ktst;

cprintf("addresses: ktst - %x, ktst1 - %x, ktst2 - %x\n", ktst, ktst1, ktst2);
cprintf("ktst data: num - %d, ptr - %x\n",ktst->number, ktst->nextk);
cprintf("ktst1 data: num - %d, ptr - %x\n",ktst1->number, ktst1->nextk);
cprintf("ktst2 data: num - %d, ptr - %x\n",ktst2->number, ktst2->nextk);

cprintf("freeing everything\n");
cprintf("kfree test\n");
kfree(test, sz1);
cprintf("kfree ktst1\n");
kfree(ktst1, sizeof(struct ktest));
cprintf("kfree ktst2\n");
kfree(ktst2, sizeof(struct ktest));
cprintf("kfree ktst\n");
kfree(ktst, sizeof(struct ktest));

cprintf("THAT'S ALL FOLKS!\n");
}
